#include <iostream>
#include <iomanip>
#include <fstream>

int main(){
    /*************************************************************************
    ////                          COUT                                    ////
    /************************************************************************/
    std::cout << "------------------------------------------------\n";
    std::cout << "                 COUT                           \n";
    std::cout << "------------------------------------------------\n";

    std::cout << "Lenguaje de Programacion 1" << std::endl;
    int anho = 2023, ciclo = 2;
    std::cout << "Ciclo: " << anho << "-" << ciclo << '\n';

    std::cerr << "------------------------------------------------\n";
    std::cerr << "                 CERR                           \n";
    std::cerr << "------------------------------------------------\n";
    std::cerr << "Este es un mensaje de cerr\n";

    std::clog << "------------------------------------------------\n";
    std::clog << "                 CLOG                           \n";
    std::clog << "------------------------------------------------\n";
    std::clog << "Este es un mensaje de clog\n";
    
    /*************************************************************************
    ////                          MANIPULADORES                           ////
    /************************************************************************/

    // Boolalpha y no bolalpha

    std::cout << "------------------------------------------------\n";
    std::cout << "                MANIPULADORES                   \n";
    std::cout << "------------------------------------------------\n";

    std::cout << std::boolalpha
              << "\nUso del boolapha"
              << "True: " << true << '\n'
              << "Flase: " << false << '\n';

    std::cout << std::noboolalpha
              << "\nUso del noboolapha"
              << "True: " << true << '\n'
              << "Flase: " << false << '\n';

    std::cout << std::hex
              << "\nShowbase: " << std::showbase << 42 << '\n'
              << "NoShowbase: " << std::noshowbase << 42 << 
              std::dec << '\n'; // esto para que no siga imprimiendo en hex

    double promedioCiclo20231 = 10.8;
    std::cout << "\nAlineacion de un numero con std::internal:\n";
    std::cout << '|' << std::internal << std::setw(15) << promedioCiclo20231 << "|\n"; 

    std::cout << "\nAlineacion de un numero con std::left:\n";
    std::cout << '|' << std::left << std::setw(15) << promedioCiclo20231 << "|\n";

    std::cout << "\nAlineacion de un numero con std::right:\n";
    std::cout << '|' << std::right << std::setw(15) << promedioCiclo20231 << "|\n";
    
    std::cout << "\nRepresentacion de numeros: \n";
    std::cout << "Decimal: " << anho << '\n'
              << "Hexadecimal" << std::hex << anho << '\n'
              << "Octal: " << std::oct << anho << '\n';
    std::cout << std::dec; // Para regresar al flujo standar

    double num = 1234.56789;
    std::cout << "\nFormatos para numero flotante: \n";
    std::cout << "Normal: " << num << '\n'
              << "Fixed: " << std::fixed << num << '\n'
              << "Scientific: " << std::scientific << num << '\n'
              << std::defaultfloat;// Regresamos al flujo normal de salida para punto flotante

    std::cout << "\nCambio de ancho para E/S\n"
              << '|' << num << "|\n"
              << '|' << std::setw(20) << num <<  "|\n";
    std::cout <<  "\nRellenamos los espacios en blanco del nuevo ancho E/S\n"
              << '|' << num << "|\n"
              << '|' << std::setfill('*') << std::setw(20) << num <<  "|\n";

    std::cout << std::setfill('*'); // si hacemos esto cambiamos el relleno para los futuros std::cout
    std::cout << "\nEjemplo de rello automatico: " << std::setw(20) << num << '\n';
    std::cout << std::setfill(' '); // regresamos al flujo standard

    num = 0.1 + 0.2;
    std::cout << "\nCambiar la presicion de los numero flotantes: \n"
              <<  "Salida normal: " << num << '\n'
              <<  "con 2 de presicion: " << std::setprecision(2) << num << '\n'
              << "con 20 de presicion: " << std::setprecision(20) << num << '\n';

    const char *curso = "Lenguaje de programacion 1";
    std::cout << "\nSalida de un mensaje entre comillas\n"
              << std::quoted(curso)<< '\n';


    /*************************************************************************
    ////                  CAMBIO DE BUFFER DEL CLOG                       ////
    *************************************************************************/
    // Guardamos la informacion del buffer de CLOG
    std::ofstream archivoLog("log.txt",std::ios::out);
    // guardamos el buffer original de clog para no perderlo
	std::streambuf * bufferDeClogOriginal = std::clog.rdbuf();
	// Redirigmos la salida del buffer original de clog
	std::clog.rdbuf(archivoLog.rdbuf());
	std::clog << "EL PROBLEMA SIEMPRE SE ENCUENTRA ENTRE LA SILLA Y EL COMPUTADOR\n";
    std::clog << "///////////////////////////((((/////////////////////////////////////////////////****************/////////////////////////////////////////////////////////////////********///////////////////////////////\n";
    std::clog << "////////////////////////////////////////////////////////////////////////////////////*************///////////////////////////////////////////////////////////////////////////////////////////////////////\n";
    std::clog << "////////////////////////////////////////////////////////////////////////////////////****************/////////////////////////////////////////////////////////////********///////////////////////////////\n";
    std::clog << "////////////////////////////////////////////////////////////////////////////////////*****************//////////////////////////////////////////////////////****************/*/*/////////////////////////\n";
    std::clog << "((((((//////////////////////////////////////////////////*******/////////////////////*******************//////////////////////////////////////////////////**********************////////****/////////////\n";
    std::clog << "((((((((///////(/(((((/(//////////////////////////////*/*********/////*/////////////*******************///////////////////////////////////////////////////*******************************///////////////\n";
    std::clog << "((((((((((((((((((((((((((///////////////////////////*****************************////****************/////////////////////////////////////////////////////**************************///////////////////\n";
    std::clog << "((///////(/(((((((((((((((((((///////////////////////**************/*********************************//////////////////(((////////////////////////////////////////////*****************/////////////////\n";
    std::clog << "////////////////((((((((//((((((/////////////////////***************************************************////////////////////////////////////////////////////////////////***********/////////////////////\n";
    std::clog << "///////////////(((((((((/(/(/(/(//////////////////*******/////////*************************************/////////////////////////////////////////////////////////////////*/*******///////////////////////\n";
    std::clog << "//////////////((((((((((((((((((((/////////////**********//////////************************,,,,,,,,......,,*************///////////////////////////////////////////////********/////////////////////////\n";
    std::clog << "//////////((((((((((((////((((((((///////////////**///////////////////////***************,,,,,...............,,,,***********////////////////////////////////////////////*/***///////////////////////////\n";
    std::clog << "////////////((((((((((((((((((((((((((((((////////////////////////////////***************,,,.,,,,,,,,,,,,,,......,,,*******//////////////*//////////////////////////////////////////////////////////////\n";
    std::clog << "/////////(((((((((((((((((((((((((((((((((////////////////////////////////////////**************,,,*****,,,,,,.....,,,,****,,,,,,,,***//////////////////////////////////////////////////////////////////\n";
    std::clog << "((((((//////(((((((((((((((((((((((((((((///////////////////////////////////(/////////((////****,,,,,,,,,,,,,,,,,,,,,,,,,,,,,***,,....,***//////////////////////////////////////////////////////////////\n";
    std::clog << "((((((((((((((((((((((((((((((((((((/(/(//////////////////////////////////(((((((((((((((#((((//////(((////********/////**********,,,,.,,**///////////////////////////////////////////////////*********/\n";
    std::clog << "(((((((((((((((((((((((((((//////((((((////////////////////////////*/(((((((((((/((#########(((//////**///////////****//((//********/**,,,**//*//////////////////////////////////////////////*******////\n";
    std::clog << "((((((((((((((((((((((/////////////////////////////////////////////(((((((((((((((((((((((((((//////*****,,,,*****////***////////////////*,,,**///////////////////////////////////////////*********/////\n";
    std::clog << "((((((((((((((((((((((///////////////////////////////////////////((((((((((((((((((//////**////*****///((//************///////////////////**,,,,*/(//////////////////////////////////////**********/////\n";
    std::clog << "((((((((((((((((((((((((///////////(//////////////////////////((((((#####(((((((/////////////(((((((////(((((((///**/////(((((((((((((///*****,***/((((///////////////////////////////*/***/*/////******\n";
    std::clog << "///////////(((((((/////((((((////((((//////////////////////((((((##%########(((/((((((((///////((########%########((////(((((((##((((((((//**,*****/(((((///////////////////////////********////********\n";
    std::clog << "///////////////////////////////(/(/(//////////////////////(((((############((((((((((((((/////////(((((###############((((///(((#######((((///////*//(((((//////////////////////////***/*//*************\n";
    std::clog << "//////////////////////////////((((///(((///////////////(((########((###%%#######((((((///////(((((((/////(//////(((((###%%%####(((((((#####(((((#(///((##(((////////////////////************************\n";
    std::clog << "//////////////////////////////////////////////////////((##%%%################(((((((((((((((((((((((((((((((((((((#######%%%%####(((((((((####(###((((((##((//////////////////*********/****************\n";
    std::clog << "/////////////////////////////////////////////////////((###%%#######%#########((((##((((((((##((((((((((((##################(((((((////(///((#%##(##(((((((((///////////////////*************************\n";
    std::clog << "/////////////////////////////////////////////////////(###%%%%%##############(#################%%%%%%%%###########((((((((///////////////((//(#%###(((##((##((///////////////////************************\n";
    std::clog << "//////////////////****//////////////////////////////((####%%%%###%%##((///////((((((###########((((((/////////******////**/////////////////(((##%#((###(((##((/////////////////*************************\n";
    std::clog << "//////////////////*****/////////////////////////////(##%##%%%%####(((/////////*********/*********************************/////////////////((/((#%###((######((//////////////////************************\n";
    std::clog << "//////////////////*******///////////////////////////(#####%%%%###((////***************************************************///////////////////((##%##((#######(//////////////////////*************///////\n";
    std::clog << "///////////////////****/////////////////////////////(#####%%%#(((((/////***************************************************/////////////////((((##%##(((#%%%#((///////////////////////*********/////////\n";
    std::clog << "////////////////////////////////////////////////////((((#%#(((((((/////******///********************************************////////////////(((((##%##((#%&%%#(/////////////////////////////////////////\n";
    std::clog << "////////////////////////////////////////////////**//((((##((((##((//////////////////((((((((////*****************************//////////////((((####%%%####%%##(/////////////////////////////////////////\n";
    std::clog << "////////////////////////////////////////////////////((((((((((#((////////////////(###%%%&&&%#((((///**********///***///////////////////((((((((###%%%%###%%&%%(////////////////****/////////////////////\n";
    std::clog << "////////////////////////////////////////////////////((((((((((#((///////////((((((((((###%%%%%%###((((////////////((((/(((#####((//////((((((((#%%%%%%%#%%%%%#(/////////////////*///////////////////////\n";
    std::clog << "////////////////////////////////////////////////////(((((((((((//////////(((((((((/////((((((##(((((((//***///(((((((###%%&&&&%%##((///((((((((#%&&%%%%%%%%%#(//////////////////////////////////////////\n";
    std::clog << "///////////////////(/////////////////////////////////((((((((///////////(((((((##%#%&&&&%%###(((((((////***///((####################(((((((((###%&&&&%%%%%%##(//////////////////////////////////////////\n";
    std::clog << "/////////////((((((((/////////////////////////////////(((((///////////////(((#%%##(%&&&&%#(###(((((//*******//((#####((((((/////((######((((###%%&&&&&%%%%##(///////////////////////////////////////////\n";
    std::clog << "///////////(/////((((/////////////////////////////////(////////////////////(((((///(####((/(((((/////********/((########%%&&&&&&%########((####%%&&&&&%%%#((///(((((((///////////******/*/*/////////////\n";
    std::clog << "////////(((((((((((((///////////////////////////////////////////////////////////////////////(///////*********/(((((###((#%&@@&%%%&&&%##########%%&&%%%%%#((//(((((((////////////*************///////////\n";
    std::clog << "/////(((/(((((((((((((////////////////////////////////////((////////*********///////////////////*///********//(((((((((/((#####(###%%%##########%%%%%%##((///((//////////////////****///////////////////\n";
    std::clog << "///(((((((((((///////////////////////////////////////////((/////////*****************///*******************///(((//////////////(((((((##((((####%%%##((////////////////////////******///////////////////\n";
    std::clog << "/////(((((((((((((((/////////////////////////////////////(///////////**************************************//////////////////(/////(((((((((########((//((((/(////////////////*///////////////////////((\n";
    std::clog << "(//////((((((((((((((((((((//((((((///////////////////**/////////////***************************************/////////**///////////////(((((######((((/(((//(((((//////////*****//////////////////////(((\n";
    std::clog << "/(/(((((((((((((((((((((((((((((((((/////////////////////////////////************************///************///((((//******/////////////(((#####((((((((((((((((/////////*****///////////////////////(((\n";
    std::clog << "(((((((((((((((((((((((((((((((((((((((((//////////////**////////////********************///(//************////(((((/***********///////((((####((((//(((((//////////////////////////////////////((((////\n";
    std::clog << "(((((((((((((((((((((((((((((((((((((((((((((((((///////////////////******************///((((///////////*////(((((###(/*********//////(((((#####(((////////////////////////////////////////////////////(\n";
    std::clog << "(((((((((((((((((((((((((((((((((((((((((((((((////////////////////*****************////((///(#####((/////((#%%%##(##((//********/////((((#####(((////////////////////////*******//////////////////////(\n";
    std::clog << "((((((((((((((((((((((((((((((((((((((((((/////////////**////////////////////////////(((///////////((((##########((((#((////***//////((((#####((/////////////////////////////////////////////////////(((\n";
    std::clog << "((((((((((((((((((((((((((((((((((((////////////////*////////////////////////////((((///***********///////////////(((((((//////////((((((####(((////////////////////////////////////////////////////((((\n";
    std::clog << "((((((((((((((((((((((((((((((((((((((((//////////////////////////////////////(((((///**************////////////////(((((((//////((((((#####(((////////////////////////////////////////////////////(((((\n";
    std::clog << "((((((((((((((((((((((((((((((((((((((((//////////////////////////////////////((///******************//////////////////(((((((((((((((######((////////////****////////////////////////////////////((((((\n";
    std::clog << "(((((((((((((((((((((((((((((((((((((((//////////////////***/////////////////////////(((((((((((((((((/(/(((((((/(/(((((((((((((((((##(####((///////////*******//////////////////////////////////(((((((\n";
    std::clog << "((((((((((((((((((((((((((((((((////////////////////////*,,,*/////////////////***////(((((((((((((######%%%##########(((((((/(((((((######((/////////////******//*****/////////////////////////(((((((((\n";
    std::clog << "((((((((((((((((((((((((((((((/////////////////////////**,.,,*////////////////**/////////////////////////(((((########(((/////(((((((#####(///////////////*****////////////////////////////(((((((((((((\n";
    std::clog << "(((((((((####(((((((((((((////////////////////////////*,...,,*(/////////////////////////////////////////////((((((((((/////////(((((#####((////////////////////////////////////////////////(((((((((((((\n";
    std::clog << "(((((((####(((((((((((((((((((///////////////////////*,......*(##///////////////////***////////////////(((((((((((((//////////((((#####(((/////////////////////////////////////////////////(((((((((((((\n";
    std::clog << "((((((((((((((((((((((((((((((//////////////////////*,.......,*##(//////////////////******//////////////((((((((((/////////((((((#####((//((///////////******/////////////////////////////((((((((((((((\n";
    std::clog << "((((((((((((((((((((((((((((///////////////////////*,..........*(((///////////////////***********//////////////////////((((((((#####((((////////////*/*******/*////////////////////////(((((((((((((((((\n";
    std::clog << "(((((((((((((((((((((((((((((////////////////(///*,.............,(((((/////////////////******************////////////((((((#######((////////////******/////////*///*****//////**//////((((((((((((((((((\n";
    std::clog << "(((((((((((((((((((((((((//(//////////////***,...................,*/((((((/(/////////////************//////////////(((((########(/////////////////////***///////////////*******///////((((((((((((((((((\n";
    std::clog << "((((((((((((((((((((((((///////////////*,..    ....................,*/(((((((((///////////////****///////////(((((((((#########(/****////////***///////////////////////////**////////(((((((((((((((((((\n";
    std::clog << "((((((((((((((((((((((/////*/////*,,..     ..........................,**/(((((((((((////////////////////////(((((((########((###(//*,*/////////////////////////////////////////////(((((((((((((((((((((\n";
    std::clog << "///((((((((((((((((((((///((/*,..     .................................,,*/((#((((((((((////////(((((((((((((((((#########((((##(///*,,,**/////////////////////////////////////((((((((((((########(((((\n";
    std::clog << "////(((((((((((((((((//**,..               ..............................,,*/((#(((((((((((((((((########################((//(##(///**,,.  .,**////////////////////////////((((((((((((((#############(#\n";
    std::clog << "((///((((((((((((((/,.                      ................................,,*/(#(((#((((((((((((####################(((((((##(/*///**,,...     .,**///////////////////////((((((((((((((((((((((((####\n";
    std::clog << "/(((((((((((((/*,..                ....... ...................................,,*/(((((((((((((((((##################(((((((((((/******,,.......     .,**///////////(////////((((((((((((((((((((((#(###\n";
    std::clog << "(((((/(((//*,.                      .....   .......................................*/((((((((((((((((((############(((((####((((//****,,,.......         ..,**/(((//////////((((((((((((((((((((((((((((\n";
    std::clog << "((((////*,.                  . .     . . . ..........................................,*/((((((((((((((###########((((((((###((((////****,,...,,,..            ..,*//((((((((((((((((((((((((((((((((((((\n";
    std::clog << "/(//*,.     .                               ............................................,*((#((((((((((((((####((((((((((###(////******/*,..,,,. ..    ....        ..,*//(((((((((((((((((((((((((((((((\n";
    std::clog << "/*,.                     .             ................................................,,**/((##(((((((#####((((((((((((((#((/*******,,**,,....  .....   .....         ..,*/((((((((((((((((((((((((((((\n";
    std::clog << ".                                       .......................................... .. .,,,,,,/(##((#((#####(((((((((((((((##(**,,***,,,,.....    ......   .....           ..,*((#((/((((((((((((((((((((\n";
    std::clog << "                                 . . . ... ..........................................,. .,...,*(##(((((((((((((((((((((((((#(*,,,*,,,,,,.....     .......  .......           .,*/(((((((((((((((((((((((\n";
    std::clog << "                                            ....................................  .,,*,.....,,*(###((((((((((((((((//////(((#*,,,,,,,,,,......      ...... ........             .,*(((((((((((((((((((((\n";
    std::clog << "..               . ... .   . . ......... . ........................................,,*,,,....,*(((((((((((///////////////((((*,,,,,,,,,..........   ..................            .,/(((((((((((((((((((\n";
    std::clog << "                  ........   ...........    .....................................,,,,,,,,,..,*/((((((///////////////////(((((*,,,,**/*,..........    ..................       .     .,/(##((((((((((((((\n";
    std::clog << "..               ......................... . . ..................................,....,,,..,/(((((((////////////////////(((/*,,,,*//**,............   ..................         .    .*/(((((((((((((((\n";
    std::clog << "  ....           .........................    .............................,....,,.......,,*((((((/////////////////////(((/*,,,,**//**,,............    .................     ......   .,/((((((((((((((\n";
    std::clog << " . .......     . . ......................... .................................,,/*,.......,*/(((((/////////////////////(/*,,,,******,,*,.............   .................... . .......  .,*(((((((((((((\n";
    std::clog << "      ......    ...  .........................................................,,,*/*,......,/(((((((////////////////////*,,,,***,,,,,,,,,.............   .............................   ..*/(((((((((((\n";
    std::clog << "       ............. .........................................................,,..,****,..,*((((((((((((((((////////((/*,,,***,,,,,,.,,,,...............   ................... ......   ....*(((((((((((\n";
    std::clog << ".....................   ..........  ............ ...............................,,..,****,,,*/((((((((///(((///////(/**,,**,,,,,,,,,.,,,,.................   ................. ......    ...,*/#(((((((#\n";
    std::clog << ".................... . .........................................................,,..,,,****,,,,*//(((((((//(//////(//,,,,*,,,,,,,,,...,,,................... .................................*((#((((##\n";
    std::clog << "....................  ............................................................,,,.,,,*****,,,,*/((///(((//((/((**,,,,,,,,..,,,....,,,...........................................,,,....,..,,(#######\n";
    std::clog << "...................................................................................,,,,,,,,,*********//((((((/(((/**,*,,,,.....,,,,....,,..........................................,,,,...,,,..,,/######\n";
    std::clog << ".....................................................................................,,,,,..,..,,,,,,,,*/((((((((*,,,,,,.......,,,,....,,..........................................,,,,..,,,,,,,.,/(####\n";
    std::clog << "...................,,..................................................................,,,,,,,,,,,,,,,,**//(((#(**,,,,.......,,,,,.....,,..........................................,,,,,.,,,,,,,,,,*(###\n";
    std::clog << "....................,,..................................................................,,,,.,,,,,,,...,,**((((/*,,,,........,,,,,.................................................,,,,,,,,,,,,,,,,,*/(#\n";
    std::clog << ".....................,,,.................................................................,,,,,,,...,,,,,,,*/(#(*,,,,........,,,,,,................................................,,,,,,,,,,,,,,,,,,,*/#\n";
    std::clog << "......................,,,..................................................................,,,........,,,,,*(#/*,,.........,,,,,,.................................................,,,*,,,,,,,,,,,,,,,,*/\n";
    std::clog << ".......................,,,...,,..............................................................,,,,,.....,,,,,/(*,,,.......,,,,,,,..................................................,,**,,,,,,,,,*,,,,,,,,\n";
    std::clog << ".......................,,,,.,,,...............................................................,,,....,,,,...,*,..,,......,,,,,,.................................................,.,*****,,,,,,,**,,,,,,,\n";
    std::clog << "....................,...,,,.,,......,,.......................................................,,,,,,,.,.,,,,..,,,,.......,,,,,,.....................................,...,,,,,.....,,****,,,,,,,****,,,,,,\n";
    std::clog << "....................,,,,,,,,,,,,,...,,........................................................,,,,......,,,,,...,......,,,,,,.......................................,,,,,,,,,....,,****,,,,,,****,,,,,,,\n";
    std::clog << "....................,,,,,,,,,,,,,,.,,,........................................................,,,,.,.....,,*,,,.......,,,,,,.......................................,,,,,,,,,,,..,,,****,,,,,,****,,,,,,,\n";
    std::clog << ".......................,,,,,,,,,,..........,,,..................................................,,,,......,**,,......,,,,,,........................................,,,,,,,,,,,,,,,,****,,,,,****,,,,,,,,\n";
    std::clog << "...................,,,,,,**,,,,,...,......,,,,...........,.......................................,,,,,....,,,,.....,,,,,,,.........................................,,,,,,,,,,,,,,*****,,,,,*****,,*,,,,,\n";
    std::clog.rdbuf(bufferDeClogOriginal);
	//cerramos el archivo
	archivoLog.close();
    return 0;
}
